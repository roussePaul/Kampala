<launch>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="log_file" default="iris"/>
  <arg name="headless" default="false"/>
  <arg name="gui" default="true"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/basic.world"/>
    <!-- <arg name="debug" value="true" /> -->
    <arg name="headless" value="$(arg headless)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>



    <include file="$(find simulator)/launch/iris.launch">
      <arg name="ns" value="iris1"/>
      <arg name="docker" value="docker-iris-1"/>
      <arg name="local" value="true"/>

      <arg name="suspended_load" value="true"/>
      <arg name="load_link_height" value="1"/> <!-- [m] -->
      <arg name="load_mass" value="0.1"/> <!-- [kg] -->
    </include>

  <group ns="iris1">

    <arg name="boundaries_shape" default="cube"/>
    <arg name="boundaries_centerx" default="0"/>
    <arg name="boundaries_centery" default="0"/>
    <arg name="boundaries_side" default="100"/>
    <arg name="boundaries_radius" default="100"/>
    <arg name="boundaries_height" default="100"/>

    <node name="security_guard" pkg="controller" type="security_guard.py" clear_params="true" output="screen">
      <param name="body_id" value="1"/>
      <param name="shape" value="$(arg boundaries_shape)"/>
      <param name="centerx" value="$(arg boundaries_centerx)"/>
      <param name="centery" value="$(arg boundaries_centery)"/>
      <param name="side" value="$(arg boundaries_side)"/>
      <param name="radius" value="$(arg boundaries_radius)"/>
      <param name="height" value="$(arg boundaries_height)"/>
    </node>

    <node name="derivator" pkg="controller" type="derivator.py" output="screen" respawn="true"/>

    <node name="lander" pkg="controller" type="lander.py" output="screen" respawn="true"/>

    <node name="PID_controller" pkg="controller" type="PID_controller.py" output="screen"/>

    <node name="circle_gen_tilt" pkg="controller" type="circle_gen_tilt.py" clear_params="true" output="screen"/>

    <node name="quadstate_to_path" pkg="controller" type="quadstate_to_path.py" respawn="true"/>

    <node name="rviz_mocap" pkg="mocap" type="rviz_mocap.py">
      <param name="qualysis_id" value="1"/>
    </node>

  </group>
  
  <node name="ros_mocap" pkg="mocap" type="ros_mocap.py" respawn="true"/>

  <arg name="body_id" default="1"/>
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find controller)/rviz_config/trajectory_following.rviz"/>



<!-- 
  <group ns="iris2">
    <include file="$(find rotors_gazebo)/launch/spawn_iris.launch">
      <arg name="ns" value="iris2" />
      <arg name="x" value="1.0" />
      <arg name="y" value="1.0" />
      <arg name="model" value="$(find rotors_description)/urdf/iris_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <node name="joy_node" pkg="joy" type="joy_node" />
    <node name="rotors_joy_interface" pkg="rotors_joy_interface" type="rotors_joy_interface" />
    <node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
      <rosparam
        command="load"
        file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_pelican.yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/pelican.yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
  </group> -->

</launch>
