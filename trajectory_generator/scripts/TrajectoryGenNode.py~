#!/usr/bin/env python
import rospy
from mocap.msg import QuadPositionDerived
from trajectory_generato import TrajectoryGenerator
import os
from trajectory import Trajectory
from straight_line_class import StraightLineGen
from arc import ArcGenerator
import math

class TrajectoryGenNode():

  def __init__(self, scenario):
    #self.trajectory_list = execfile(scenario)
    self.trajectory_list = [ArcGenerator([0.,0.,0.6],[0.4,0.,0.6],[0.,0.5,0.],2*math.pi)]
    rospy.init_node('TG')
    self.pub = rospy.Publisher('trajectory_gen/target',QuadPositionDerived, queue_size=10)
    
  def generate(self):
    for i in range(0,len(self.trajectory_list)):
      self.trajectory_list[i].begin()
      self.__execute_trajectory(i)

  def __execute_trajectory(self,index):
    r = 10.
    rate = rospy.Rate(r)
    time = 0.0
    while not self.trajectory_list[index].is_done():
      msg = self.trajectory_list[index].loop(time)
      self.pub.publish(msg)
      rate.sleep()
      time += 1/r
     
    
    
    
    
if __name__ == '__main__':
  try:
    os.chdir("/home/summer/catkin_sml/src/kampala/trajectory_generator/scripts")
    TrajectoryGenNode(["straight_line_class.py","test2.py"]).generate()
  except rospy.ROSInterruptException:
    pass

